#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
char charset[26] = { 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
using namespace std;

size_t last_factor = 1;

bool prime(size_t n)
{
    //if(n == 2)
    //    return false;
    for(size_t i=(n/2);i>2;i-=2)
    {
        if(n%i == 0)
            return false;
    }
    return true;
}

size_t gcd(size_t a,size_t b)
{
    if(a < b)
    {
        return b;
    }
    return a;
}

bool present(vector<size_t> &sp,size_t n)
{
    for(size_t i=0;i<sp.size();i++)
    {
        if(sp[i] == n)
            return true;
    }
    return false;
}

void find_primefactors(vector<size_t> &un_p,vector<size_t> &sor_p,size_t n,bool first_no)
{
    size_t a,b;
    if(first_no)
    {
        for(size_t factor = 3;factor < (n/2);factor+=2)
        {
            if(n%factor == 0 && prime(factor))
            {
                a = factor;
                b = (n/factor);
                //if(!present(sor_p,n) )//&& prime(a))
                    sor_p.push_back(a);

                //if(!present(sor_p,b) )//&& prime(b))
                    sor_p.push_back(b);

                un_p.push_back(a);
                un_p.push_back(b);

                last_factor = b;
                break;
            }
        }
    }
    else
    {
        //b = gcd(last_factor,(n/last_factor));
        b = (n/last_factor);
        if(!present(sor_p,b) )//&& prime(b))
            sor_p.push_back(b);

        un_p.push_back(b);
        last_factor = b;
    }
}

void print_factors(vector<size_t> &pr)
{
    cout << "Size: " << pr.size() << '\n';
    for(size_t i=0;i<pr.size();i++)
    {
        cout << pr[i] << " ";
    }
    cout << '\n';
}

size_t sorted_pos(vector<size_t> &s_p,size_t n)
{
    size_t i=0;
    for(;i<s_p.size();i++)
    {
        if(s_p[i] == n)
            break;
    }
    return i;
}

void decipher(vector<size_t> &uns_p,vector<size_t> &s_p,string &dtext)
{
    size_t pos = 0;
    for(size_t i=0;i<uns_p.size();i++)
    {
        pos = 0;
        pos = sorted_pos(s_p,uns_p[i]);
        if(pos > 25)
        {
            pos = pos % 25;
        }
        dtext.push_back(char(65+pos));
    }
}

int main(int argc,char *argv[])
{
    size_t t,n,l;
    size_t cyper;
    cin >> t;
    for(size_t i=1;i<=t;i++)
    {
        cin >> n >> l;

        last_factor = 0;
        vector<size_t> prime_factors;
        vector<size_t> prime_factors_unsorted;
        string deci_text;

        for(size_t li = 0;li < l ;li++)
        {
            cin >> cyper;
            if(li == 0)
            {
                //find the prime factors of first cyper text
                find_primefactors(prime_factors_unsorted,prime_factors,cyper,true);
            }
            else
            {
                find_primefactors(prime_factors_unsorted,prime_factors,cyper,false);
            }
        }

        sort(prime_factors.begin(),prime_factors.end());
        //print_factors(prime_factors);
        //print_factors(prime_factors_unsorted);

        decipher(prime_factors_unsorted,prime_factors,deci_text);
        cout << "Case #" << i << ": " << deci_text << endl;
        cout.flush();

    }
    return 0;
}

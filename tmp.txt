#include <iostream>
#include <vector>
#include <algorithm>
#include <map>

using namespace std;

bool uniq(unsigned long int num)
{
    vector<bool> digits(10,0);

    while(num)
    {
        if(digits[num%10]   ==  0   &&  (num%10 != 0))
        {
            digits[num%10]  =   1;
        }
        else
            return false;
        num/=10;
    }
    return true;
}

bool visited_all(map<int,bool>  flag,vector<int> digits)
{
    for(unsigned int i=0;i<digits.size();i++)
    {
        if(flag[    digits[i]   ]   ==  0)
        {
            return  false;
        }
    }
    return true;
}

bool runaround(unsigned long int num)
{
    unsigned long int tmp   =   num;
    vector<int> digits;
    map<int,bool> digit_flag;

    while(tmp)
    {
        digits.push_back(tmp%10);
        digit_flag[tmp%10] =   0;
        tmp/=10;
    }
    reverse(digits.begin(),digits.end());

    int start_digit =   digits[0];
    int current_digit   =   0,current_index =   1;
    //digit_count[start_digit]    =   1;

    //main loop
    while(  true    )
    {
        if( (start_digit  ==  current_digit)    ||  (digit_flag[current_digit]    ==  1)    )
        {
            if(digit_flag[current_digit]    ==  1)
            {
                if(visited_all(digit_flag,digits))
                {
                    //cout    <<  "Solution Found \t" <<  num <<  '\n';
                    return true;
                }
                else
                {
                    break;
                }
            }

            break;
        }

        if(current_index-1  <   0)
        {
            current_digit   =   digits[ digits.size()-1 ];
        }
        else
        {
            current_digit   =   digits[current_index-1];
        }

        //cout    << current_digit    <<  " " <<  current_index  <<  '\n';
        //cin.get();

        //set flag for digit
        digit_flag[    current_digit ] =   1;

        int next_index  =   ((current_index +   current_digit)%digits.size() - 1);

        if(next_index   <   0)  next_index  =   digits.size()-1;

        next_index++;
        if(next_index   ==  digits.size())  next_index  =   0;

        current_index =   next_index;
        if(current_index-1  <   0)
        {
            current_digit   =   digits[ digits.size()-1 ];
        }
        else
        {
            current_digit   =   digits[current_index-1];
        }
    }
    return false;
}

int main()
{
    unsigned long int n =   654654654;
    n++;
    //n   =   81362;
    for(;   n   <   1000000000; ++n)
    {
        //cout    <<  "Now:   "   <<  n   <<  '\t';
        if(uniq(n))
        {
            //cout    <<"Uniq:    "<<  n   <<  '\t';
            if(runaround(n))
            {
                cout    <<"Sol: "<<  n  <<  '\n';
            }
        }
        //cout    <<  '\n';
    }
    //runaround(n);

    return 0;
}
